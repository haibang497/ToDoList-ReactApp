{"version":3,"sources":["component/ListItem.js","component/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","filterItem","deleteItem","crossItem","console","log","listItems","map","item","index","className","key","style","textDecoration","checked","text","icon","onClick","type","onChange","SearchBox","props","handleSearch","placeholder","library","add","faTrash","App","handleInput","e","setState","currentItem","target","value","Date","now","state","items","filter","toLowerCase","includes","searchItem","preventDefault","this","push","localStorage","setItem","JSON","stringify","filteredItems","window","confirm","itemsSave","getItem","parseItemSave","parse","findIndex","id","onSubmit","addItem","disabled","length","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bf145a25.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/itemList.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nfunction ListItem({ filterItem, deleteItem, crossItem }) {\r\n  //const { filterItem, deleteItem, crossItem } = props;\r\n  console.log(\"filterItem\", filterItem);\r\n  const listItems = filterItem ? (\r\n    filterItem.map((item, index) => {\r\n      return (\r\n        <div className=\"list\" key={item.key}>\r\n          <div\r\n            style={{\r\n              textDecoration: (item.checked? \"line-through\" : \"\"),\r\n            }}\r\n          >\r\n            <span>{`${index + 1}.`}</span>\r\n            {item.text}\r\n          </div>\r\n          <div className=\"group-icon\">\r\n            <span>\r\n              <FontAwesomeIcon\r\n                className=\"faicons\"\r\n                icon=\"trash\"\r\n                onClick={() => deleteItem(item.key)}\r\n              />\r\n            </span>\r\n            <div className=\"CheckItem\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={item.checked}\r\n                onChange={() => crossItem(item.key)}\r\n                className=\"Checkbox\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    })\r\n  ) : (\r\n    <div></div>\r\n  );\r\n  return <div>{listItems}</div>;\r\n}\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport '../css/SearchBox.css';\r\n\r\nfunction SearchBox(props){\r\n    return(\r\n        <div className=\"search\">\r\n            <input onChange={props.handleSearch} type=\"text\" placeholder=\"Search here\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./App.css\";\r\nimport ListItem from \"./component/ListItem\";\r\nimport SearchBox from \"./component/SearchBox\";\r\n\r\nlibrary.add(faTrash);\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      currentItem: {\r\n        text: \"\",\r\n        key: \"\",\r\n        checked: false,\r\n      },\r\n      searchItem: \"\",\r\n      filterItem: [],\r\n    };\r\n  }\r\n\r\n  handleInput = (e) => {\r\n    this.setState({\r\n      currentItem: {\r\n        text: e.target.value,\r\n        key: Date.now(),\r\n      },\r\n    });\r\n  };\r\n\r\n  handleSearch = (e) => {\r\n    console.log(e.target.value);\r\n    const { items } = this.state;\r\n    let filterItem = items.filter((currentItem) => {\r\n          console.log(currentItem);\r\n          return currentItem.text.toLowerCase().includes(e.target.value.toLowerCase());\r\n        });\r\n    this.setState({\r\n      filterItem,\r\n      searchItem: e.target.value,\r\n    });\r\n  };\r\n\r\n  addItem(e) {\r\n    e.preventDefault();\r\n    const { currentItem, items } = this.state;\r\n    if (currentItem.text !== \"\") {\r\n      items.push(currentItem);\r\n      this.setState({\r\n        items,\r\n        currentItem: {\r\n          text: \"\",\r\n          key: \"\",\r\n          checked: false,\r\n        },\r\n      });\r\n    }\r\n    localStorage.setItem(\"task\", JSON.stringify(items));\r\n  }\r\n\r\n  deleteItem(key) {\r\n    const filteredItems = this.state.items.filter((item) => item.key !== key);\r\n    this.setState({\r\n      items: filteredItems,\r\n    });\r\n    if(window.confirm('Are you sure?')){\r\n    }\r\n    localStorage.setItem(\"task\", JSON.stringify(filteredItems));\r\n  }\r\n\r\n  componentDidMount() {\r\n    const itemsSave = window.localStorage.getItem(\"task\");\r\n    const parseItemSave = JSON.parse(itemsSave);\r\n    console.log(\"parse\", parseItemSave);\r\n    if (itemsSave == null) {\r\n      return false;\r\n    } else {\r\n      this.setState({\r\n        items: parseItemSave,\r\n      });\r\n      console.log(this.state.items);\r\n    }\r\n  }\r\n\r\n  crossItem(key) {\r\n    const { items } = this.state;\r\n    const item = items.findIndex((item) => item.key === key);\r\n    console.log(item);\r\n    items[item].checked = !items[item].checked;\r\n    this.setState({\r\n      items,\r\n    });\r\n    localStorage.setItem(\"task\", JSON.stringify(items));\r\n  }\r\n\r\n\r\n  render() {\r\n    const { items, filterItem } = this.state;\r\n    console.log(items);\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <form id=\"to-do-form\" onSubmit={(e) => this.addItem(e)}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter task here\"\r\n              value={this.state.currentItem.text}\r\n              onChange={this.handleInput}\r\n            />\r\n            <button type=\"submit\" disabled={!this.state.currentItem.text}>\r\n              Add\r\n            </button>\r\n          </form>\r\n        </header>\r\n        <SearchBox handleSearch={this.handleSearch} />\r\n        <div className=\"showItem\">\r\n          <ListItem\r\n            filterItem={filterItem.length>0?filterItem:items}\r\n            deleteItem={(key) => this.deleteItem(key)}\r\n            crossItem={(key) => this.crossItem(key)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}